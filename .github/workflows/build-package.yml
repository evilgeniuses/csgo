name: build-package

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  release:
    tags:
      - v*
  push:
    branches:
     - 'main'

jobs:
  builds:
    strategy:
      matrix:
        os: [windows-latest]
        python-version: ['3.8']
        include:
          - environment: "dev"
            aws-account: "813914655382"
            aws-region: "us-west-2"
            role-session-name: EgCommonPackageDevSession
            role-to-assume: AWS_ROLE_TO_ASSUME_DEV
    runs-on: ${{ matrix.os }}
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.17.6
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        # if: github.event_name == 'release' && github.event.action == 'created' && startsWith(github.ref, 'refs/tags')
        with:
          role-to-assume: ${{ secrets[matrix.role-to-assume] }}
          role-session-name: ${{ matrix.role-session-name }}
          aws-region: ${{ matrix.aws-region }}
      
      - name: Configure CodeArtifact credentials
        id: configure_codeartifact_credentials
        # if: github.event_name == 'release' && github.event.action == 'created' && startsWith(github.ref, 'refs/tags')
        run: |
          export CODEARTIFACT_USERNAME=aws
          export CODEARTIFACT_TOKEN=`aws codeartifact get-authorization-token --domain eg-pypi --domain-owner ${{ matrix.aws-account }} --query authorizationToken --output text`
          echo ::set-output name=codeartifact_username::$(echo $CODEARTIFACT_USERNAME)
          echo ::set-output name=codeartifact_token::$(echo $CODEARTIFACT_TOKEN)
      
      - name: Build package dist
        # if: github.event_name == 'release' && github.event.action == 'created' && startsWith(github.ref, 'refs/tags')
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine
          python setup.py sdist bdist_wheel

      - name: Publish to repo
        # if: github.event_name == 'release' && github.event.action == 'created' && startsWith(github.ref, 'refs/tags')
        run: |
          pip3 install twine
          export TWINE_REPOSITORY_URL=`aws codeartifact get-repository-endpoint --domain eg-pypi --domain-owner ${{ matrix.aws-account }} --repository eg-pypi --format pypi --query repositoryEndpoint --output text`
          python -m twine upload --repository-url $TWINE_REPOSITORY_URL dist/* --verbose
        env:
          TWINE_USERNAME: ${{ steps.configure_codeartifact_credentials.outputs.codeartifact_username }}
          TWINE_PASSWORD: ${{ steps.configure_codeartifact_credentials.outputs.codeartifact_token }}